# name: Docker

# # This workflow uses actions that are not certified by GitHub.
# # They are provided by a third-party and are governed by
# # separate terms of service, privacy policy, and support
# # documentation.

# on:

#   push:
#     branches: [ "main" ]
#     # Publish semver tags as releases.
#     tags: [ 'v*.*.*' ]
#   pull_request:
#     branches: [ "main" ]

# env:
#   # Use docker.io for Docker Hub if empty
#   REGISTRY: docker.io
#   # github.repository as <account>/<repo>
#   IMAGE_NAME: ${{ github.repository }}


# jobs:
#   build:

#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       packages: write
#       # This is used to complete the identity challenge
#       # with sigstore/fulcio when running outside of PRs.
#       id-token: write

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       # Install the cosign tool except on PR
#       # # https://github.com/sigstore/cosign-installer
#       # - name: Install cosign
       
#       #   uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v3.1.1
#       #   with:
#       #     cosign-release: 'v2.1.1'

#       # Set up BuildKit Docker container builder to be able to build
#       # multi-platform images and export cache
#       # https://github.com/docker/setup-buildx-action
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

#       # Login against a Docker registry except on PR
#       # https://github.com/docker/login-action
#       - name: Log into registry ${{ env.REGISTRY }}
#         uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       # Extract metadata (tags, labels) for Docker
#       # https://github.com/docker/metadata-action
#       - name: Extract Docker metadata
#         id: meta
#         uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

#       # Build and push Docker image with Buildx (don't push on PR)
#       # https://github.com/docker/build-push-action
#       - name: Build and push Docker image
#         # id: build-and-push
#         uses:  docker/build-push-action@v5.0.0
#         with:
#           context: .
#           # file: dockerfile
#           pull: true
#           push: true
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
          
#       # Sign the resulting Docker image digest except on PRs.
#       # This will only write to the public Rekor transparency log when the Docker
#       # repository is public to avoid leaking data.  If you would like to publish
#       # transparency data even for private images, pass --force to cosign below.
#       # https://github.com/sigstore/cosign
#       # - name: Sign the published Docker image
       
#       #   env:
#       #     # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
#       #     TAGS: ${{ steps.meta.outputs.tags }}
#       #     DIGEST: ${{ steps.build-and-push.outputs.digest }}
#       #   # This step uses the identity token to provision an ephemeral certificate
#       #   # against the sigstore community Fulcio instance.
#       #   run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}


# name: CI

# on:
#   push:
#     branches: [ "main" ]

# jobs:
#   Build-and-Push-Image:
#     runs-on: ubuntu-latest
#     if: "!contains(github.event.head_commit.message, 'skip ci')"
#     name: Build and Push Image to Image registry
#     env:
#       REGISTRY: docker.io
#     # defaults:
#     #   run:
#     #     shell: bash
#     steps:
#     # - name: Set up Go 1.20
#     #   uses: actions/setup-go@v4
#     #   with:
#     #     go-version: '1.20'
#     #   id: go

#     # - name: Check out code into the Go module directory
#     #   uses: actions/checkout@v4
    
#     # - name: "go test"
#     #   run: "go test ."
    
#     # - name: Build Code
#     #   run: |
#     #     go mod download
#     #     go build -v .
    
#     # - name: Initialize Pipeline
#     #   uses: mshick/add-pr-comment@v2.8.1
#     #   env:
#     #     GITHUB_TOKEN: ${{ secrets.GITHUB_REPO_TOKEN }}
#     #   with:
#     #     message: "@${{ github.actor }} GitHub Actions has started building this code. Check status at 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'"
#     #     message-id: ${{ github.run_id }}-${{ github.run_attempt }}

#     - name: Generate Vars
#       id: generate_vars
#       run: |
#         # Just Tag
#         IMAGE_TAG=pr-${{ github.event.push_request.number }}-$(echo ${{ github.event.push_request.head.sha }} | cut -c1-8)
#         # Just Image name
#         IMAGE_NAME=${{ github.repository }}
#         #Image ID= Name + Tag
#         IMAGE_ID=$IMAGE_NAME:$IMAGE_TAG
#         IMAGE_REPO=$REGISTRY/$IMAGE_ID
#         echo "Image: $IMAGE_REPO"
#         echo "image=$IMAGE_REPO" >>$GITHUB_OUTPUT
#         echo "image_name=$IMAGE_NAME" >>$GITHUB_OUTPUT

#     - name: Set up QEMU
#       uses: docker/setup-qemu-action@v3.0.0
#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v3.0.0
#     - name: Login to DockerHub
#       uses: docker/login-action@v3.0.0
#       with:
#         username: ${{ secrets.DOCKER_USERNAME }}
#         password: ${{ secrets.DOCKER_PASSWORD }}
    
#     - name: Echo Output
#       run: |
#         echo "Image from Output: ${{ steps.generate_vars.outputs.image }}"
#         echo "Repo from Output: ${{ steps.generate_vars.outputs.image_name }}"

#     # - name: Build and Push Docker Image
#     #   uses: docker/build-push-action@v5.0.0
#     #   with:
#     #     context: .
#     #     file: ./dockerfile
#     #     pull: true
#     #     push: true
#     #     tags: ${{ steps.generate_vars.outputs.image }}
#     # - name: build
#     #   run: docker build . -t myimg:1.0 
  
#     # - name: Push
#     #   run: docker tag 
#     - name: Build and push Docker image
#       id: docker_build
#       uses: docker/build-push-action@v2
#       with:
#         context: .
#         file: /home/utsav.adhyaru/Documents/ci/test-ci/docker-exercise/dockerfile # Adjust the path to your Dockerfile
#         push: true
#         tags: ${{ github.repository_owner }}/test-ci:latest 

--- 

name: Publish Docker image

on:
  push:
    branches: ['main']

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    # IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: utsav0077/${{ github.event.repository.name }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}-${{ github.run_number }}
          labels: ${{ steps.meta.outputs.labels }}